# PostgreSQL. Versions 9.3 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On macOS with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem "pg"
#
default: &default
  adapter: postgresql
  encoding: unicode
  host: <%= ENV['DB_HOST'] || 'localhost' %>
  database: <%= ENV['DB_NAME'] || 'smart_menu_development' %>
  username: <%= ENV['DB_USER'] %>
  password: <%= ENV['DB_PASSWORD'] %>
  
  # Connection pooling configuration
  pool: <%= ENV.fetch("DB_POOL_SIZE", 5).to_i %>
  checkout_timeout: 30
  prepared_statements: true
  variables:
    statement_timeout: 5000  # 5 seconds

development:
  primary:
    <<: *default
    database: smart_menu_development
  
  # Read replica configuration for development (optional)
  # In development, this can point to the same database or a separate replica
  replica:
    <<: *default
    database: smart_menu_development
    # For development, use same DB unless REPLICA_DB_HOST is set
    host: <%= ENV['REPLICA_DB_HOST'] || ENV['DB_HOST'] || 'localhost' %>
    replica: true

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  primary:
    <<: *default
    database: smart_menu_test
  
  # Test environment uses same database for both primary and replica
  replica:
    <<: *default
    database: smart_menu_test
    replica: true

# As with config/credentials.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password or a full connection URL as an environment
# variable when you boot the app. For example:
#
#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# If the connection URL is provided in the special DATABASE_URL environment
# variable, Rails will automatically merge its configuration values on top of
# the values provided in this file. Alternatively, you can specify a connection
# URL environment variable explicitly:
#
#   production:
#     url: <%= ENV["MY_APP_DATABASE_URL"] %>
#
# Read https://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full overview on how database connection configuration can be specified.
#
production:
  primary:
    # Heroku uses DATABASE_URL, fallback to individual settings
    url: <%= ENV['DATABASE_URL'] %>
    adapter: postgresql
    encoding: unicode
    database: smart_menu_production
    username: smart_menu
    password: <%= ENV["SMART_MENU_DATABASE_PASSWORD"] %>
    host: <%= ENV['PRIMARY_DB_HOST'] || ENV['DB_HOST'] || 'localhost' %>
    pool: <%= ENV.fetch("DB_POOL_SIZE", 5).to_i %>
    checkout_timeout: 30
    prepared_statements: true
    variables:
      statement_timeout: 5000
  
  # Read replica configuration for production
  replica:
    # Use REPLICA_DATABASE_URL if available, otherwise fallback to individual settings
    url: <%= ENV['REPLICA_DATABASE_URL'] %>
    adapter: postgresql
    encoding: unicode
    database: smart_menu_production
    username: <%= ENV['REPLICA_DB_USER'] || 'smart_menu' %>
    password: <%= ENV["REPLICA_DATABASE_PASSWORD"] || ENV["SMART_MENU_DATABASE_PASSWORD"] %>
    host: <%= ENV['REPLICA_DB_HOST'] || ENV['PRIMARY_DB_HOST'] || ENV['DB_HOST'] || 'localhost' %>
    replica: true
    pool: <%= ENV.fetch("REPLICA_DB_POOL_SIZE", 15).to_i %>
    checkout_timeout: 30
    prepared_statements: true
    variables:
      statement_timeout: 15000  # 15 seconds for longer analytics queries
      lock_timeout: 5000        # 5 seconds for lock timeout
