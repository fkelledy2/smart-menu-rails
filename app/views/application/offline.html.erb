<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Smart Menu - Offline</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      margin: 0;
      padding: 0;
      background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
      color: white;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .offline-container {
      text-align: center;
      max-width: 400px;
      padding: 2rem;
    }
    
    .offline-icon {
      font-size: 4rem;
      margin-bottom: 1rem;
      opacity: 0.8;
    }
    
    .offline-title {
      font-size: 2rem;
      font-weight: 600;
      margin-bottom: 1rem;
    }
    
    .offline-message {
      font-size: 1.1rem;
      margin-bottom: 2rem;
      opacity: 0.9;
      line-height: 1.5;
    }
    
    .offline-actions {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    
    .btn {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 0.5rem;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s;
      text-decoration: none;
      display: inline-block;
    }
    
    .btn-primary {
      background: rgba(255, 255, 255, 0.2);
      color: white;
      border: 2px solid rgba(255, 255, 255, 0.3);
    }
    
    .btn-primary:hover {
      background: rgba(255, 255, 255, 0.3);
      transform: translateY(-2px);
    }
    
    .btn-secondary {
      background: transparent;
      color: white;
      border: 2px solid rgba(255, 255, 255, 0.5);
    }
    
    .btn-secondary:hover {
      background: rgba(255, 255, 255, 0.1);
      transform: translateY(-2px);
    }
    
    .status-indicator {
      position: fixed;
      top: 1rem;
      right: 1rem;
      padding: 0.5rem 1rem;
      background: rgba(220, 53, 69, 0.9);
      color: white;
      border-radius: 2rem;
      font-size: 0.875rem;
      font-weight: 500;
    }
    
    .status-indicator.online {
      background: rgba(40, 167, 69, 0.9);
    }
    
    .cached-data {
      margin-top: 2rem;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 0.5rem;
      text-align: left;
    }
    
    .cached-data h3 {
      margin: 0 0 0.5rem 0;
      font-size: 1.1rem;
    }
    
    .cached-data ul {
      margin: 0;
      padding-left: 1.5rem;
    }
    
    .cached-data li {
      margin-bottom: 0.25rem;
    }
    
    @media (max-width: 480px) {
      .offline-container {
        padding: 1rem;
      }
      
      .offline-title {
        font-size: 1.5rem;
      }
      
      .offline-message {
        font-size: 1rem;
      }
    }
  </style>
</head>
<body>
  <div class="status-indicator" id="connectionStatus">
    üì° Offline
  </div>

  <div class="offline-container">
    <div class="offline-icon">üì±</div>
    
    <h1 class="offline-title">You're Offline</h1>
    
    <p class="offline-message">
      No internet connection detected. Don't worry - you can still access cached content and your changes will sync when you're back online.
    </p>
    
    <div class="offline-actions">
      <button class="btn btn-primary" onclick="window.location.reload()">
        üîÑ Try Again
      </button>
      
      <a href="/" class="btn btn-secondary">
        üè† Go to Home
      </a>
      
      <button class="btn btn-secondary" onclick="showCachedContent()">
        üìã View Cached Data
      </button>
    </div>
    
    <div class="cached-data" id="cachedContent" style="display: none;">
      <h3>Available Offline:</h3>
      <ul>
        <li>Restaurant information</li>
        <li>Menu items and pricing</li>
        <li>Recent orders</li>
        <li>Cached images</li>
        <li>Basic analytics</li>
      </ul>
      <p><small>Last updated: <span id="lastSync">Unknown</span></small></p>
    </div>
  </div>

  <script>
    // Check connection status
    function updateConnectionStatus() {
      const statusEl = document.getElementById('connectionStatus')
      
      if (navigator.onLine) {
        statusEl.textContent = 'üì° Online'
        statusEl.className = 'status-indicator online'
        
        // Auto-reload when back online
        setTimeout(() => {
          window.location.reload()
        }, 1000)
      } else {
        statusEl.textContent = 'üì° Offline'
        statusEl.className = 'status-indicator'
      }
    }
    
    // Show cached content
    function showCachedContent() {
      const cachedEl = document.getElementById('cachedContent')
      const lastSyncEl = document.getElementById('lastSync')
      
      if (cachedEl.style.display === 'none') {
        cachedEl.style.display = 'block'
        
        // Try to get last sync time from localStorage
        const lastSync = localStorage.getItem('lastSyncTime')
        if (lastSync) {
          lastSyncEl.textContent = new Date(lastSync).toLocaleString()
        }
      } else {
        cachedEl.style.display = 'none'
      }
    }
    
    // Listen for connection changes
    window.addEventListener('online', updateConnectionStatus)
    window.addEventListener('offline', updateConnectionStatus)
    
    // Initial status check
    updateConnectionStatus()
    
    // Check for service worker updates
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.addEventListener('message', (event) => {
        if (event.data && event.data.type === 'CACHE_UPDATED') {
          // Show notification that cached content was updated
          const notification = document.createElement('div')
          notification.style.cssText = `
            position: fixed;
            bottom: 1rem;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(40, 167, 69, 0.9);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 500;
            z-index: 1000;
          `
          notification.textContent = '‚úÖ Content updated'
          document.body.appendChild(notification)
          
          setTimeout(() => {
            notification.remove()
          }, 3000)
        }
      })
    }
    
    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if (e.key === 'r' && (e.ctrlKey || e.metaKey)) {
        e.preventDefault()
        window.location.reload()
      } else if (e.key === 'h' && (e.ctrlKey || e.metaKey)) {
        e.preventDefault()
        window.location.href = '/'
      }
    })
  </script>
</body>
</html>
